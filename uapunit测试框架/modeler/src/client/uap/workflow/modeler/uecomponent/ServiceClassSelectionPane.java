package uap.workflow.modeler.uecomponent;

import java.awt.Container;
import java.awt.event.ActionEvent;
import java.awt.event.KeyEvent;
import java.beans.PropertyEditorSupport;
import java.util.ArrayList;
import java.util.List;
import java.util.Vector;

import javax.swing.tree.TreePath;

import uap.workflow.bpmn2.model.FormProperty;
import uap.workflow.client.ui.JarServiceClassModel;

import nc.uap.ws.gen.util.StringUtil;
import nc.ui.pub.beans.UIButton;
import nc.ui.pub.beans.UIPanel;
import nc.ui.pub.beans.UIScrollPane;
import nc.ui.pub.beans.UITextField;
import nc.ui.pub.beans.UITree;

public class ServiceClassSelectionPane extends UIPanel {
	
	private static final long serialVersionUID = 1L;

	public ServiceClassSelectionPane(ServiceClassSelectionModel model) {
        initComponents();
	}

	private ServiceClassSelectionModel classMethodModel;

    private String result = null;

    public String getServiceClass() {
        return result;
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane2 = new UIScrollPane();
        classesTree = new UITree();
        txtJarPath = new UITextField();
        btnRefJar = new UIButton();

        //setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        classesTree.setModel(getTreeModel());
        classesTree.setName("classesTree"); // NOI18N
        jScrollPane2.setViewportView(classesTree);

        //org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(desktopapplication1.DesktopApplication1.class).getContext().getResourceMap(JarServiceClass.class);
        txtJarPath.setText(""); // NOI18N
        txtJarPath.setName("txtJarPath"); // NOI18N
        txtJarPath.addKeyListener(new java.awt.event.KeyListener() {
			public void keyPressed(KeyEvent arg0) {
			}
			public void keyReleased(KeyEvent arg0) {
			}
			public void keyTyped(KeyEvent arg0) {
			}
        });

        btnRefJar.setText("..."); // NOI18N
        btnRefJar.setName("btnRefJar"); // NOI18N
        btnRefJar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
            	btnRefActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(txtJarPath)
                        .addGap(18, 18, 18)
                        .addComponent(btnRefJar)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 262, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnRefJar)
                    .addComponent(txtJarPath))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

    }// </editor-fold>

    private void btnOKActionPerformed() {
        TreePath selectionPath = classesTree.getSelectionPath();
        Object[] paths = selectionPath.getPath();

        if (paths == null || paths.length == 1) {
            return;
        }

        StringBuffer sb = new StringBuffer();
        for (int i = 1; i < paths.length; i++) {
            if (i != 1) {
                sb.append(".");
            }
            sb.append(paths[i].toString());
        }

        result = sb.toString();
        //this.dispose();
    }

    private void btnRefActionPerformed(java.awt.event.ActionEvent evt) {
    }

    public ServiceClassSelectionModel getTreeModel(){
        if (classMethodModel == null){
            javax.swing.tree.DefaultMutableTreeNode root = new javax.swing.tree.DefaultMutableTreeNode("Module");
            classMethodModel = new ServiceClassSelectionModel(root);
            classMethodModel.setPath("E:\\Workflow\\activiti-5.10\\setup\\files\\dependencies\\libs\\activation-1.1.jar");
        }
        return classMethodModel;
    }
    // Variables declaration - do not modify
    private UIButton btnRefJar;
    private UITextField txtJarPath;
    private UITree classesTree;
    private UIScrollPane jScrollPane2;
    // End of variables declaration

	
	
	protected void initCellEditor(){
		//Form Values
//		getTable().getColumnModel().getColumn(11).setCellEditor();
	}
	
	public Object assemberData() {
		btnOKActionPerformed();
		
//		Vector vector = ((AbstractBpmnTableModel)getTable().getModel()).getDataVector();
//		List<FormProperty> list = new ArrayList<FormProperty>();
//		for (int start = 0, end = ((AbstractBpmnTableModel)getTable().getModel()).getRowCount(); start < end; start++) {
//			Vector rowVector = (Vector) vector.get(start);
//			FormProperty formPorp = new FormProperty();
//			formPorp.setId(rowVector.get(0).toString());
//			formPorp.setName(rowVector.get(1).toString());
//			formPorp.setType(rowVector.get(2).toString());
//			formPorp.setValue(rowVector.get(3).toString());
//			formPorp.setExpression(rowVector.get(4).toString());
//			formPorp.setVariable(rowVector.get(5).toString());
//			formPorp.setDefaultExpression(rowVector.get(6).toString());
//			formPorp.setDatePattern(rowVector.get(7).toString());
//			formPorp.setRequired(rowVector.get(8) == null ? false : Boolean.parseBoolean(rowVector.get(8).toString()));
//			formPorp.setReadable(rowVector.get(9) == null ? false : Boolean.parseBoolean(rowVector.get(9).toString()));
//			formPorp.setWriteable(rowVector.get(10) == null ? false : Boolean.parseBoolean(rowVector.get(10).toString()));
//			formPorp.setFormValues(null);
//			list.add(formPorp);
//		}
		return result;
	}

	public void unassemberData(Object intializeData) {
//		((AbstractBpmnTableModel)getTable().getModel()).getDataVector().clear();
//		if(intializeData==null)
//			return;
//		List list =(List) intializeData;
//		for (Object obj : list) {
//			Vector rowVector = new Vector();
//			FormProperty formProp = (FormProperty) obj;
//			rowVector.add(formProp.getId());
//			rowVector.add(formProp.getName());
//			rowVector.add(formProp.getType());
//			rowVector.add(formProp.getValue());
//			rowVector.add(formProp.getExpression());
//			rowVector.add(formProp.getVariable());
//			rowVector.add(formProp.getDefaultExpression());
//			rowVector.add(formProp.getDatePattern());
//			rowVector.add(formProp.getRequired());
//			rowVector.add(formProp.getReadable());
//			rowVector.add(formProp.getWriteable());
//			rowVector.add(formProp.getFormValues());
//			((AbstractBpmnTableModel)getTable().getModel()).getDataVector().add(rowVector);
//		}
		
	}
}
